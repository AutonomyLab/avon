/*
 *  WebSim - Library for web-enabling and federating simulators.
 *  Copyright (C) 2009
 *    Richard Vaughan, Brian Gerkey, and Nate Koenig
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */ 

/* Desc: HTTP interface to simulators
 * Author: Brian Gerkey, Richard Vaughan, Abbas Sadat
 * Date: 9 March 2009
 * SVN: $Id: gazebo.h 7398 2009-03-09 07:21:49Z natepak $
 */

#include <string>
#include <vector>
#include <map>
#include <list>

// These headers must be included prior to the libevent headers
#include <sys/types.h>
#include <sys/queue.h>

// libevent
#include <event.h>
#include <evhttp.h>

namespace websim
{

enum Format { TEXT=0, XML };

class Pose;
class Velocity;
class Acceleration;
class Time;
class Bounds;
class Fiducial;




class WebSim
{
public:
  WebSim( const std::string& _host,
			 const unsigned short _port);

  virtual ~WebSim();
  
  /** Start the HTTP server.
   @param verbose Iff true, print some status information to stdout */
  void Startup( bool verbose );

  void LoadFederationFile( const std::string& filename );
  
  /** Wait for go signals from all confederates */
  virtual void Wait();
  
  /** Run one simulation step on all confederates */
  void Tick();
  
  // Interface to be implemented by simulators ==========================================================

  /** Return a string that usefully identifies the simulator for a
      human reader, e.g. "MyRobotSimulator" */
  virtual std::string IdentificationString() = 0;

  /** Return a string that usefully identifies the simulator version
      for a human reader, e.g. "1.3.1" */
  virtual std::string VersionString() = 0;

  /** Start the virtual clock running, unpausing the simulation. If
      the clock is already running, this does nothing.
      
      @return true on succes, false on failure.
  */
  virtual bool ClockStart()=0;

  /** Stop the virtual clock running, pausing the simulation. If the
      clock is already stopped, this does nothing.

      @return true on succes, false on failure.
  */
  virtual bool ClockStop()=0;
  
  /** Run for a specified amount of simulated time, then pause. This should work
	  whether or not the clock is currently paused. WebSim uses this to implement 
      clock synchronization in simulator federation, but it can also be used by end-users. 
	  
	  @param msec The amount of simulated time to run until pausing, in milliseconds. 
  */	  
  virtual bool ClockRunFor( uint32_t msec )=0;  

  /** Create a model of the specified type */
  virtual bool CreateModel(const std::string& name, 
									const std::string& type,
									std::string& response) = 0;
  /** Delete the specified model */
  virtual bool DeleteModel(const std::string& name,
									std::string& response) = 0;

  /** Gets the type of the model from simulation.
	
      @param name The name of the model
      @param type the type of the model 

      @returns TRUE if the method is successful.
  */
  virtual bool GetModelType(const std::string& name, std::string& type) = 0;

  /** Gets the data of the model. If the format is XML and a valid xmlNode is passed,
	the data will be added to the xmlNode, otherwise the text/xml will be put in 
	the response parameter.
	
      @param name The name of the model
      @param response the output string containing data in text/xml format 
      @param format specifies the format of response (text or xml)
      @param xmlnode the xmlNode pointer of this model 

      @returns TRUE if the method is successful.
  */
  virtual bool GetModelData(const std::string& name, 
									std::string& response,
									Format format,
									void* xmlnode ) = 0;

  /** Gets the PVA of the model. 
	
      @param name The name of the model
      @param p	position 
      @param v	velocity
      @param a	acceleration
      @param response	the error message 

      @returns TRUE if the method is successful and FALSE otherwise.
  */
  virtual bool SetModelPVA(const std::string& name, 
									const Pose& p,
									const Velocity& v,
									const Acceleration& a,
									std::string& response) = 0;


  /** Gets PVA of the  model. 
	
      @param name The name of the model
      @param t the time of simulation returned by the method 
      @param p position
      @param v velocity 
      @param a acceleration

      @returns TRUE if the method is successful anf FALSE otherwise.
  */
  virtual bool GetModelPVA(const std::string& name, 
									Time& t,
									Pose& p,
									Velocity& v,
									Acceleration& a,
									std::string& response) = 0;

  /** Gets the extent and center of the model
	
      @param name The name of the model
      @param bx	length 
      @param by	width
      @param bz	height 
      @param center the center of the model 
	
      @returns TRUE if the method is successful.
  */
  virtual bool GetModelGeometry(const std::string& name,
									double& bx,
									double& by,
									double& bz,
									Pose& center,
									std::string& response) = 0;
 

  /** Gets the tree of the model. If no model is specified as input, 
	the tree of the world will be generated.
	
      @param name The name of the model
      @param response the output string containing the tree in text/xml format 
      @param format specifies the format of response (text or xml)
      
      @returns TRUE if the method is successful.
  */
  bool GetModelTree(const std::string& model, Format format, std::string& response, bool everything);

  /** Get the current simulation time
	
	@returns time of simulation */
  virtual Time GetTime() = 0;



  /** Sets the PVA of the model. 
	
      @param name The name of the model
      @param p	position 
      @param v	velocity
      @param a	acceleration
      @param response	the error message 

      @returns TRUE if the method is successful and FALSE otherwise.
  */
  bool SetPuppetPVA( const std::string& name, 
							Pose& p,
							Velocity& v,
							Acceleration& a );
  
protected:
  void GenerateSampleUrls(std::vector<std::string> &list);
  void StringSplit(const std::string &s, 
						 std::vector<std::string> &t, 
						 const std::string &d);
  
  /**Number of ticks we require each step before exiting Wait() */
  int tick_count_expected;
  /** Number of ticks remaining in this step before we can quit Wait() */
  int ticks_remaining;
  
protected:
  std::string host;
  std::string hostportname; // format "host:port" to uniquely identify this instance
  unsigned short port;
  
  struct evhttp* eh;

  // Static, so that it can be passed as a callback to libevent
  static void EventCallback(evhttp_request* req, void* arg);
  
  /** Gets the uri parameters. 
	
      @param value the output variable
      @param query_args the query structure 
      @param key the name of the parameter
      
      @returns TRUE if a parameter with the given key exists.
  */
  bool GetValue( std::string& value,
		 struct evkeyvalq* query_args, 
		 const std::string& key);

  bool HandleURI(const std::string& model,
		 const std::string& prop,
		 const std::string& action,
		 struct evkeyvalq* kv,
		 std::string& response);

  bool HandleSimRequest(const std::string& prop,
			const std::string& action,
			Format format,
			struct evkeyvalq* kv,
			std::string& response);

  bool HandleSimClockRequest( std::string action,
			      Format format,
			      struct evkeyvalq* kv,
			      std::string& response);  

  bool HandleSimFactoryRequest( std::string action,
				Format format,
				struct evkeyvalq* kv,
				std::string& response);  
  
  bool HandleSimChildrenRequest( std::string action,
				 Format format,
				 struct evkeyvalq* kv,
				 std::string& response);  

  bool HandleSimTreeRequest( std::string action,
				 Format format,
				 struct evkeyvalq* kv,
				 std::string& response);  

  bool HandleSimGeometryRequest( std::string action,
				 Format format,
				 struct evkeyvalq* kv,
				 std::string& response);  

  bool HandleSimGreetRequest( std::string action,
			      Format format,
			      struct evkeyvalq* kv,
			      std::string& response);  

  bool HandleSimHomepageRequest( std::string action,
			      Format format,
			      struct evkeyvalq* kv,
			      std::string& response);  

  bool HandleSimVisualizationRequest( std::string action,
			      Format format,
			      struct evkeyvalq* kv,
			      std::string& response);  

  bool HandleModelRequest(const std::string& model,
			  const std::string& prop,
			  const std::string& action,
			  Format format,
			  struct evkeyvalq* kv,	
			  std::string& response);
  
  bool HandleModelDataRequest( std::string model,
			      std::string action,
			      Format format,
			      struct evkeyvalq* kv,
			      std::string& response);  

  bool HandleModelTreeRequest( std::string model,
			      std::string action,
			      Format format,
			      struct evkeyvalq* kv,
			      std::string& response);  

  bool HandleModelGeometryRequest( std::string model,
			      std::string action,
			      Format format,
			      struct evkeyvalq* kv,
			      std::string& response);  

  bool HandleModelPVARequest( std::string model,
			      std::string action,
			      Format format,
			      struct evkeyvalq* kv,
			      std::string& response);  

  bool ParseURI(std::string& model,
		std::string& prop,
		std::string& action,
		std::string uri,
		std::string& response);
  void DeleteKeyVal(struct evkeyvalq* query_args);
  
  

  /** Puts the PVA data in the desired format: text/xml. If the format parameter is TEXT, the output is  
	in the response parameter. If the format is XML and xmlnode is NULL, the xml content will be stored
	in the response parameter. If the forma is XML and xmlnode is not NULL, the data will be added to the
	xml node as  attributes.
  
      @param name the name of the model
      @param p position
      @param v velocity
      @param a acceleration
      @param format the output format
      @param response the string output
      @param xmlnode the xml node output
*/      
  void GetPVA(const std::string& name, 
									Time& t,
									const Pose& p,
									const Velocity& v,
									const Acceleration& a,
									Format format,
									std::string& response,
									void* xmlnode );


  /** Puts the laser data in the desired format: text/xml. If the format parameter is TEXT, the output is  
	in the response parameter. If the format is XML and xmlnode is NULL, the xml content will be stored
	in the response parameter. If the forma is XML and xmlnode is not NULL, the data will be added to the
	xml node as  attributes.
  
      @param name the name of the model
      @param t time of the simulation
      @param resolution the resolution of the laser 
      @param fov the field of view of the laser 
      @param p position of the laser model
      @param ranges the data of the laser 
      @param format the output format
      @param response the string output
      @param xmlnode the xml node output
*/      
  void GetLaserData(const std::string& name,
									Time& t,
									uint32_t& resolution,
									double& fov,
						 			Pose& p,							
									std::vector<double>& ranges,
									Format format,
     								        std::string& response,
									void* xmlnode );





  /** Puts the ranger data in the desired format: text/xml. If the format parameter is TEXT, the output is  
	in the response parameter. If the format is XML and xmlnode is NULL, the xml content will be stored
	in the response parameter. If the forma is XML and xmlnode is not NULL, the data will be added to the
	xml node as  attributes.
  
      @param name the name of the model
      @param t time of the simulation
      @param p positions of the ranger sensors  
      @param ranges the data of the ranger sensor 
      @param format the output format
      @param response the string output
      @param xmlnode the xml node output
*/      
  void GetRangerData(const std::string& name,
									Time& t,
									std::vector<Pose>& p,
									std::vector<double>& ranges,
									Format format,
									std::string& response,
									void* xmlnode );

  /** Puts the fiducial data in the desired format: text/xml. If the format parameter is TEXT, the output is  
	in the response parameter. If the format is XML and xmlnode is NULL, the xml content will be stored
	in the response parameter. If the forma is XML and xmlnode is not NULL, the data will be added to the
	xml node as  attributes.
  
      @param name the name of the model
      @param t time of the simulation
      @param f the detected targets  
      @param format the output format
      @param response the string output
      @param xmlnode the xml node output
*/      
  void GetFiducialData(const std::string& name,
									Time& t,
									std::vector<Fiducial>& f,
									Format format,
									std::string& response,
									void* xmlnode );

  /** Puts the geometry information of the model in the desired format: text/xml. If the format parameter is TEXT, the output is  
	in the response parameter. If the format is XML and xmlnode is NULL, the xml content will be stored
	in the response parameter. If the forma is XML and xmlnode is not NULL, the data will be added to the
	xml node as  attributes.
  
      @param name the name of the model
      @param bx	length 
      @param by	width
      @param bz	height 
      @param center center of the model 
      @param format output format
      @param response the string output
      @param xmlnode the xml node output
*/      
   void GetGeometryData(const std::string& name,
									double& x,
									double& y,
									double& z,
									Pose& center,
									Format format,
									std::string& response,
									void* xmlnode );


  /** Gets the children of the model.
  
      @param name the name of the model
      @param children the names of the children 
      
      @returns TRUE if successful.
*/      
   virtual bool GetModelChildren(const std::string& model, 
									std::vector<std::string>& children) = 0;
   
  /** Adds the model tree of the specified model to the xml node. If dumpdata parameter if true,
	the data od the models are also included in the tree, otherwise, the tree will only contain
	the name of the models.
  
      @param name the name of the model
      @param xmlparent parent node of the model
      @param dumpdata If TRUE, the data of the models will be included in the tree.

      @returns TRUE if successful.
*/      
   bool GetModelTreeXML(const std::string& model, void* xmlparent, bool everything);


  // forward decare
  class Confederate;
  
  // manage an object we control on some federated simulators
  class Puppet
  {
  private:
	 WebSim* ws;
	 
  public:  
	 Puppet( WebSim* ws, const std::string& name );
	 ~Puppet();

	 // unique ID used as a system-wide handle for this puppet, used as
	 // hash table key
 	 std::string name;
	 
	 bool created;
	 
	 // the remote servers that are hosting an instance of this puppet
	 //GList* confederates;
	 std::list<Confederate*> confederates;

	 // sends the current physical state of the puppet to all
	 // confederates
	 void Push( Pose p, Velocity v, Acceleration a );
	 
	 // create an instance of the puppet on this confederate, using the
	 // named puppet prototype (defined locally at the conferderate)
	 void AddConfederate( Confederate* conf, 
								 const std::string& prototype );
  };
  
  // manage a federated simulator
  class Confederate
  {
  private:
	 // connection to a remote http simulation server
	 struct evhttp_connection* http_con;  
	 struct evhttp_request* http_req;
	 
	 static void PuppetCreationCallback(  evhttp_request* req, void* arg );
	 static void PuppetPushCallback( evhttp_request* req, void* arg );

	 WebSim* ws;

  public:
	 Confederate( WebSim* ws, const std::string& uri );  
	 ~Confederate();
	 
	 void AddPuppet( Puppet* puppet,
						  const std::string& prototype );
	 
	 int Push( const std::string& name, Pose p, Velocity v, Acceleration a );

	 static void TickReplyCb( evhttp_request* req, void* arg );

	 // send a tick request to this host
	 int Tick();
	 
	 // list of pointers to Puppet objects that are hosted on this
	 // connection - can iterate over these to update all puppets
	 std::list<Puppet*> puppet_list;

	 // unique ID for this confederate in format "hostname:port", used as
	 // hash table key
	 std::string name;  
  };
  
 protected:
  static const std::string package;
  static const std::string version;

  std::map<std::string,Puppet*> puppets;
  std::map<std::string,Confederate*> confederates;

  // counts the number of status messages sent and replies not yet received
  int unacknowledged_pushes;

  // counts the number of clock ticks sent and replies not yet received
  int unacknowledged_ticks;

  unsigned long total_ticks;

public:
  /** Get a puppet by name */
  Puppet* GetPuppet( const std::string& name );
  
  /** Get a confederate by its logical name */
  Confederate* GetConfederate( const std::string& name );

  /** For each confederate, call the callback function */
  void ForEachConfederate( void(*cb)(const std::string&, Confederate*, void*), void* arg );
  
  /** For each puppet, call the callback function */
  void ForEachPuppet( void(*cb)(const std::string&, Puppet*, void*), void* arg );
};

class Time
{
public:
  Time( unsigned long sec, unsigned long usec ) :
	 sec(sec), usec(usec)
  { /* nothing to do except initialize */ }
  
  Time() : sec(0), usec(0) {}
  
  Time( uint64_t microseconds )
  {
	 sec = microseconds / 1e6;
	 usec = microseconds - (sec * 1e6);	 
  }

  unsigned long sec; ///< seconds since the start of simulation time
  unsigned long usec; ///< millions of a second since the last whole second
  
  /** Returns the time in a human-readable string form "sec.usec" */
  std::string String();
};
  
class Pose
{
public:
  double x,y,z,r,p,a;
  
  Pose() :
	 x(0), y(0), z(0), r(0), p(0), a(0)
  {
	 // nothing to do
  }
  
  Pose( double x, double y, double z,
		  double r, double p, double a ) :
	 x(x), y(y), z(z), r(r), p(p), a(a)
  {
	 // nothing to do
  }
  
};

class Velocity : public Pose
{
public:
  Velocity() : Pose()
  {}

  Velocity( double x, double y, double z,
				double r, double p, double a ) :
	 Pose( x, y, z, r, p, a )
  {}  
};

class Acceleration : public Pose
{
public:
  Acceleration() : Pose()
  {}
	 
  Acceleration( double x, double y, double z,
					 double r, double p, double a ) :
	 Pose( x, y, z, r, p, a )
  {}  
};

class Bounds
{
public:
	/// largest value in range, initially zero
	double max; 
	/// smallest value in range, initially zero
    	double min;
    
    	Bounds() : max(0), min(0) { /* empty*/  }
};

class Fiducial
{
 public:
	Pose pos;
	int id;
	Fiducial():id(-1){} 

};

}
